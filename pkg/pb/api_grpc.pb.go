// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrdersManagerServiceClient is the client API for OrdersManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersManagerServiceClient interface {
	InsertOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderTnxResponse, error)
	SendConfirmation(ctx context.Context, in *Confirmation, opts ...grpc.CallOption) (*ConfirmationResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
}

type ordersManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersManagerServiceClient(cc grpc.ClientConnInterface) OrdersManagerServiceClient {
	return &ordersManagerServiceClient{cc}
}

func (c *ordersManagerServiceClient) InsertOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderTnxResponse, error) {
	out := new(OrderTnxResponse)
	err := c.cc.Invoke(ctx, "/pb.OrdersManagerService/InsertOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersManagerServiceClient) SendConfirmation(ctx context.Context, in *Confirmation, opts ...grpc.CallOption) (*ConfirmationResponse, error) {
	out := new(ConfirmationResponse)
	err := c.cc.Invoke(ctx, "/pb.OrdersManagerService/SendConfirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersManagerServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/pb.OrdersManagerService/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersManagerServiceServer is the server API for OrdersManagerService service.
// All implementations must embed UnimplementedOrdersManagerServiceServer
// for forward compatibility
type OrdersManagerServiceServer interface {
	InsertOrder(context.Context, *Order) (*OrderTnxResponse, error)
	SendConfirmation(context.Context, *Confirmation) (*ConfirmationResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*OrderResponse, error)
	mustEmbedUnimplementedOrdersManagerServiceServer()
}

// UnimplementedOrdersManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrdersManagerServiceServer struct {
}

func (UnimplementedOrdersManagerServiceServer) InsertOrder(context.Context, *Order) (*OrderTnxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOrder not implemented")
}
func (UnimplementedOrdersManagerServiceServer) SendConfirmation(context.Context, *Confirmation) (*ConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendConfirmation not implemented")
}
func (UnimplementedOrdersManagerServiceServer) GetOrder(context.Context, *GetOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrdersManagerServiceServer) mustEmbedUnimplementedOrdersManagerServiceServer() {}

// UnsafeOrdersManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersManagerServiceServer will
// result in compilation errors.
type UnsafeOrdersManagerServiceServer interface {
	mustEmbedUnimplementedOrdersManagerServiceServer()
}

func RegisterOrdersManagerServiceServer(s grpc.ServiceRegistrar, srv OrdersManagerServiceServer) {
	s.RegisterService(&OrdersManagerService_ServiceDesc, srv)
}

func _OrdersManagerService_InsertOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersManagerServiceServer).InsertOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrdersManagerService/InsertOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersManagerServiceServer).InsertOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersManagerService_SendConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Confirmation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersManagerServiceServer).SendConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrdersManagerService/SendConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersManagerServiceServer).SendConfirmation(ctx, req.(*Confirmation))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersManagerService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersManagerServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OrdersManagerService/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersManagerServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrdersManagerService_ServiceDesc is the grpc.ServiceDesc for OrdersManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdersManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OrdersManagerService",
	HandlerType: (*OrdersManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertOrder",
			Handler:    _OrdersManagerService_InsertOrder_Handler,
		},
		{
			MethodName: "SendConfirmation",
			Handler:    _OrdersManagerService_SendConfirmation_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _OrdersManagerService_GetOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
